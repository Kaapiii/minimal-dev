version: "3.7"
networks:
  app-net:
  proxy:
volumes:
  app-data:
  app-redis:
  app-caddy:


services:
  # ------------------------
  # Nginx - php-fpm versions
  # ------------------------

  caddy:
    image: caddy
    volumes:
      - ./.docker/caddy/Caddyfile:/etc/caddy/Caddyfile
      - ./public:/srv/app/public
#      - app-caddy:/data
#      - app-caddy:/config
#    user: ${UID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.caddy.entrypoints=websecure"
      - "traefik.http.routers.caddy.rule=Host(`caddy.minimal.localhost`)"
      - "traefik.http.routers.caddy.tls=true"                                         # TLS termination
      # Middlewares
      - "traefik.http.middlewares.force-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.force-https.redirectscheme.permanent=true"
      # Enable redirect from http to https
      - "traefik.http.routers.caddy-insecure.entrypoints=web"
      - "traefik.http.routers.caddy-insecure.rule=Host(`caddy.minimal.localhost`)"
      - "traefik.http.routers.caddy-insecure.middlewares=force-https"
    networks:
      - proxy

  nginx:
    image: nginx
    build:
      context: .
      dockerfile: .docker/nginx/Dockerfile
    ports:
      - "8099:80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`nx.minimal.localhost`)"
      #- "traefik.http.routers.nginx.rule=Host(`db.minimal.localhost`) && PathPrefix(`/api`)"
    depends_on:
      - traefik
    volumes:
      - ./public:/srv/app/public
    networks:
      - app-net
      - proxy

  php:
    build:
      args:
        - PHP_VERSION=${PHP_VERSION}
      context: .
      dockerfile: .docker/php/Dockerfile
    user: "${UID}:${GID}"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - mariadb
      - traefik
    ports:
      - "9000"
      - "9003" #Xdebug3
    volumes:
      - .:/srv/app
    networks:
      - app-net
      - proxy
    env_file: .env

  # ------------------------
  # Databases
  # ------------------------
  mariadb:
    image: mariadb:10.5
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    ports:
      - "13306:3306"
    labels:
      - "traefik.enable=true"
      # Routers
      - "traefik.http.routers.mariadb.rule=Host(`db.minimal.localhost`)"
#      - "traefik.http.routers.mariadb.rule=Host(`*`)"
#      - "traefik.tcp.routers.mariadb.entryPoints=mysqlep"
      - "traefik.tcp.routers.mariadb.service=mariadb"
      # Service (TCP)
      - "traefik.tcp.services.mariadb.loadbalancer.server.port=3306"
    environment:
      - MYSQL_DATABASE=demo
      - MYSQL_ROOT_PASSWORD=password
    networks:
      - app-net
      - proxy
    env_file: .env

  smtp:
    image: mailhog/mailhog
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.tcp.routers.mariadb.service=web"
      - "traefik.http.routers.smtp.rule=Host(`mail.minimal.localhost`)"
      # Service
      - "traefik.http.services.smtp.loadbalancer.server.port=8025" # forward traffic to port 8025
    depends_on:
      - traefik
    networks:
      - proxy
#
#  redisInsights:
#    image: redislabs/redisinsight:latest
##    ports:
##      - "8001:8001"
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.redisInsights.rule=Host(`redisInsights.minimal.localhost`)"
#      - "traefik.http.services.redisInsights.loadbalancer.server.port=8001"
#    depends_on:
#      - traefik
#    networks:
#      - proxy

#  redis:
#    image: redis
##    ports:
##      - "6379:6379"
#    labels:
#      - "traefik.enable=true"
#      - "traefik.tcp.routers.redis.rule=HostSNI(`*`)"
#      - "traefik.tcp.routers.redis.entrypoints=redisep"
#      - "traefik.tcp.routers.redis.service=redis"
#      - "traefik.tcp.services.redis.loadbalancer.server.port=6379"
#    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASS}
#      #--requirepass ${REDIS_PASS}
#    # --save 20 1 which instructs the server to save 1 or more writes every 20 seconds to disk in case the server restarts
#    volumes:
#      - app-redis:/data
#    networks:
#      - app-net
#    env_file:
#      - .env

  # Responsible service for creating and updating automatically the SSL certificates
  minion-cert:
    build:
      context: .
      dockerfile: .docker/minion-cert/Dockerfile
    user: "${UID}:${GID}"
    volumes:
      - .docker/traefik/cert/:/traefik/cert/              # Map dev cert folder for creation
      - .docker/traefik/config/:/traefik/config/          # Map conf folder for seting up the initial config
    command:
#      - "sh -c 'chmod ug+x certificates.sh'"
      - "./certificates.sh"

  traefik:
    image: traefik:v2.10
    command:
      # Use Traeffik's dynamic configuration
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
      - "--log.level=DEBUG"
      - "--log.filePath=/logs/traefik.log"
      # ----------------------------
      # Additional Entry points
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.mariadb.address=:3306"
#      - "--entrypoints.redisep.address=:6379"
      # ----------------------------
      # Configure TLS
      - "--providers.file.directory=/configuration/"
      - "--providers.file.watch=true"
      # ----------------------------
      # For dynamic / automatic Certificate management
      # https://traefik.io/blog/traefik-2-tls-101-23b4fbee81f1/
    depends_on:
      minion-cert:
        condition: service_completed_successfully # Guarantees the Traefik config and certificates were created
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
      - "8080:8080" # Mailhog
      - "3306:3306" # Mysql
      - "6379:6379" # # Redis
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock     # Manage Docker
      - ./logs/:/logs/                                # Map logs
      - .docker/traefik/cert/:/cert/                  # Map dev certs
      - .docker/traefik/config/:/configuration/       # Map config (user for certs)
    networks:
      - proxy
  whoami:
    image: traefik/whoami:v1.7.1
    labels:
      - "traefik.http.routers.whoami.rule=Host(`whoami.minimal.localhost`)"
      - "traefik.http.middlewares.whoami.redirectscheme.scheme=https"
      - "traefik.http.middlewares.whoami.redirectscheme.permanent=true"
      - "traefik.http.routers.whoami.tls=true"